beta, gamma 범위 찾기

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.6384 0.8981 2.2386 4.0327 7.2905 13.3567 22.8256 30.8378 42.2975 56.2646 47.5132 38.472 26.2143 16.6187 9.8595 5.859 4.1657 3.6729 1.1788];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.6384; 22.4670; 943.7411];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:100
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]



경기

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [1.0556 1.512 3.0863 5.2878 10.4356 18.8006 30.4227 41.0844 56.0504 76.0886 66.1409 55.0256 38.8822 25.2938 14.8897 9.1469 6.3161 5.6259 2.5032 ];

% beta, gamma의 초기값
beta = 0.000001;
gamma = 0.5;

% 1월 2주차의 데이터
y0 = [1.0556; 17.5338; 1324.112];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:5000
        
        % beta_est 증가
        beta_est = beta_est + 10^-6;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.001676000000000
gamma_save = 1.630000000000001
Y(17~23) = 6.2988    3.9875    2.5017    1.5636    0.9737    0.6052    0.3758
=====================================================================
서울

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.6384 0.8981 2.2386 4.0327 7.2905 13.3567 22.8256 30.8378 42.2975 56.2646 47.5132 38.472 26.2143 16.6187 9.8595 5.859 4.1657 3.6729 1.1788];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.6384; 22.4670; 943.7411];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:100
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.002190000000000
gamma_save = 1.310000000000001
Y(18~23) = 3.4911    2.0395    1.1881    0.6902    0.4005    0.2324    0.1347
=====================================================================
경남

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0770 0.1323 0.3710 0.7735 1.4420 2.8644 5.3914 8.7171 14.0707 18.4954 15.8837 12.8793 8.7451 5.6728 3.4181 2.3975 1.7458 1.5519 0.546];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0770; 1.6932; 332.2514];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]


beta_save = 0.007730000000000
gamma_save = 1.910000000000002
Y(18~23) = [1.5343    0.9191    0.5447    0.3211    0.1887    0.1105    0.0648]
=====================================================================
대구

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0756 0.2212 0.5068 0.9674 1.5946 2.6824 4.1216 5.4355 7.6293 11.2448 10.15 8.596 6.2825 4.3785 2.8742 1.9621 1.4805 1.2943 0.3948];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0756; 2.0546; 239.7044];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.009400000000000
gamma_save = 1.530000000000001
Y(18~23) = 1.1513    0.6735    0.3915    0.2269    0.1311    0.0757    0.0437
=====================================================================
경북

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0623 0.1288 0.3171 0.7301 1.2817 1.9271 3.2655 4.7915 7.679 10.9074 10.8003 9.6964 7.2891 5.1982 3.4972 2.5081 1.8879 1.6625 0.7042];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0623; 1.0010; 262.8789];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.009400000000000
gamma_save = 1.860000000000001
Y(18~23) = 1.8073    1.1361    0.7038    0.4317    0.2635    0.1603    0.0973
=====================================================================
인천

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.1554 0.287 0.7336 1.2061 2.6572 4.5892 7.6153 9.8147 13.0165 16.59 13.9412 11.4415 7.5929 5.0498 3.0345 1.8382 1.2593 1.1417 0.4249];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.1554; 3.4948; 290.6326];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.007700000000000
gamma_save = 1.560000000000001
Y(18~23) = 1.2073    0.7235    0.4309    0.2559    0.1515    0.0896    0.0530
=====================================================================
충남

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0791 0.1246 0.3164 0.6972 1.2509 2.1105 3.2907 4.7047 7.0441 10.7821 9.996 9.1504 6.7879 4.7054 2.8224 1.7724 1.2187 1.0794 0.4466];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0791; 1.5129; 210.5109];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.010900000000000
gamma_save = 1.650000000000001
Y(17~22) = 1.1989    0.7349    0.4463    0.2697    0.1622    0.0975    0.0585
=====================================================================
강원

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0651 0.0784 0.126 0.3472 0.6419 1.1515 2.0461 3.3593 5.4068 7.4991 7.273 6.6836 5.0834 3.4524 2.2435 1.4329 0.9898 0.8911 0.4109];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0651; 0.9429; 153.276];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.015300000000000
gamma_save = 1.770000000000001
Y(18~23) = 1.0007    0.6448    0.4095    0.2585    0.1621    0.1014    0.0633
=====================================================================
전북

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0665 0.1029 0.2429 0.6076 1.0528 1.6100 2.5725 4.0082 6.3210 8.694 8.5183 7.5201 5.6273 4.0509 2.5389 1.7682 1.1473 1.0227 0.4102];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0665; 0.6678; 179.6761];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.012400000000000
gamma_save = 1.570000000000001
Y(18~23) = 1.1109    0.6788    0.4108    0.2475    0.1485    0.0889    0.0532
=====================================================================
부산

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.1022 0.1365 0.4424 1.0129 1.9019 3.9368 7.7770 12.5412 19.6882 20.6591 12.6007 8.778 5.5755 3.5756 2.2960 1.6471 1.2733 1.1396 0.3318];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.1022; 2.3676; 336.7248];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.007700000000000
gamma_save = 1.900000000000002
Y(18~23) = 0.9932    0.5766    0.3323    0.1908    0.1095    0.0627    0.0359
=====================================================================
전남

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0931 0.1169 0.1939 0.4431 0.8407 1.2264 2.1014 3.493 5.6931 8.3699 8.6072 8.6625 6.4155 4.3988 2.6677 1.8620 1.2929 1.0318 0.3535];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0931; 0.3561; 184.7057];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]
beta_save = 0.010400000000000
gamma_save = 1.110000000000001
Y(18~23) = 1.0353    0.6062    0.3539    0.2061    0.1198    0.0696    0.0405
=====================================================================
울산

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0175 0.0392 0.1036 0.2569 0.4942 1.0598 2.0188 3.0345 4.7369 6.1810 5.3592 4.3190 3.0709 1.9943 1.3048 0.8792 0.6468 0.6384 0.2240];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0175; 0.5201; 113.0641];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.020200000000000
gamma_save = 0.510000000000000
Y(18~23) = 0.5886    0.3634    0.2242    0.1385    0.0854    0.0527    0.0325
=====================================================================
광주

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.1267 0.1813 0.2660 0.5551 0.9905 1.6128 2.7958 4.2070 5.1660 8.3930 6.9202 6.3385 4.9700 3.6085 2.0223 1.3853 0.9422 0.8183 0.4494];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.1267; 0.4902; 144.3893];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.019200000000000
gamma_save = 0.390000000000000
Y(18~23) = 0.9764    0.6624    0.4498    0.3051    0.2072    0.1405    0.0954
=====================================================================
대전

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0406 0.0791 0.2415 0.4935 0.8918 1.7605 2.7055 3.5533 5.1604 7.1561 7.2485 6.0767 4.8174 3.4069 1.9929 1.3146 0.9345 0.7910 0.3234];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0406; 0.9866; 145.361];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.016300000000000
gamma_save = 1.720000000000001
Y(18~23) = 0.8755    0.5346    0.3228    0.1938    0.1158    0.0691    0.0412
=====================================================================
충북

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0406 0.0707 0.1771 0.4151 0.7784 1.4504 2.4094 3.6890 5.6343 8.6205 8.0423 7.4081 5.2297 3.5910 2.2022 1.3958 0.9933 0.8834 0.3171];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0406; 0.9085; 159.1346];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-4;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.014500000000000
gamma_save = 1.610000000000001
Y(18~23) = 0.9084    0.5391    0.3174    0.1858    0.1085    0.0633    0.0368
=====================================================================
제주

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0070 0.0098 0.0364 0.1197 0.3143 0.6419 1.1795 1.9957 3.0751 3.7583 3.0968 2.8371 2.0496 1.3356 0.7952 0.5677 0.3738 0.3248 0.1701];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0070; 0.3287; 67.1278];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:200
        
        % beta_est 증가
        beta_est = beta_est + 10^-5;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.048000000000000
gamma_save = 0.410000000000000
Y(18~23) = 0.3869    0.2570    0.1709    0.1135    0.0755    0.0501    0.0333
=====================================================================
세종

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [0.0091 0.0119 0.0434 0.1281 0.2107 0.4158 0.6440 0.8561 1.3349 2.0104 2.1742 1.9894 1.3419 0.8904 0.5012 0.3178 0.2219 0.2100 0.1120];

% beta, gamma의 초기값
beta = 0.001;
gamma = 0.01;

% 1월 2주차의 데이터
y0 = [0.0091; 0.1277; 35.4463];

% 지역 데이터가 총 19주차이므로 t의 범위를 1~19으로 지정
tspan = [1:1:19];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,19); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:19
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 2^-(19-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 19;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:250
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:300
        
        % beta_est 증가
        beta_est = beta_est + 10^-3;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:19
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(19-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 19;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:22];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(17) y(18) y(19) y(20) y(21) y(22)]

beta_save = 0.109000000000000
gamma_save = 0.370000000000000
Y(18~23) = 0.2348    0.1623    0.1121    0.0775    0.0535    0.0370    0.0255
=====================================================================



10.

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2702];

% beta, gamma의 초기값
beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 48.6038; 5131.5167];

% 실제 데이터가 총 20주차이므로 t의 범위를 1~20으로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,20); 
RMSE_sum = 0;

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
    RMSE_sum = RMSE_sum + 3^-(20-b) * RMSE(b);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = RMSE_sum / 20;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:150
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:20000
        
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
        RMSE_sum = 0;

        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
            RMSE_sum = RMSE_sum + 3^-(20-b) * RMSE(b);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = RMSE_sum / 20;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:23];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 5.078989000000104e-04
gamma_save = 2.189999999999997
Y(18~23) = 23.8236   17.2352   12.2657    8.6311    6.0241    4.1817
=====================================================================

9.

clear all
close all


%% 초기값

% 주당 확진자 수 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

% beta, gamma의 초기값
beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 실제 데이터가 총 20주차이므로 t의 범위를 1~20으로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위를 고정시키기 위함)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% 계산 및 저장을 위한 초기값 지정
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;

% 오차 계산에 사용할 주차의 데이터 및 가중치 설정
RMSE_save_sum = (RMSE(18)/9 + RMSE(19)/3 + RMSE(20)) / 3;


%% 학습

% gamma를 1부터 2.5까지 0.01 단위로 증가
for j = 1:1:150
    
    % gamma에 따른 최적값도 구하기 위해 beta를 초기값으로 지정
    beta_est = beta;

    % beta를 바꿔가면서 최적값 찾기, 0.0003226189부터 0.0005226189까지 10^-8 단위로 이동
    for i=1:1:20000
        
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta_est가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta_est가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        % 오차 계산에 사용할 주차의 데이터 및 가중치 설정
        RMSE_sum = (RMSE(18)/9 + RMSE(19)/3 + RMSE(20)) / 3;
        
        % 기존에 저장한 값보다 오차가 더 적게 나타날 경우 그 값을 저장
        if RMSE_save_sum > RMSE_sum
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end
    
    % gamma_est 증가
    gamma_est = gamma_est + 0.01;
end

% 예측을 위한 이후의 3주까지 범위로 지정
tspan = [1:1:23];

% 앞에서 RMSE가 가장 적게 나타났던 beta와 gamma로 SIR 모델 계산
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 4.917188999999311e-04
gamma_save = 2.079999999999999
Y(18~23) = 24.7806   17.5658   12.2619    8.4744    5.8126    3.9691
=====================================================================

8.

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = RMSE(20);


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = RMSE(20);

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 4.397388999999393e-04
gamma_save = 1.730000000000001
Y(19~22) = 18.1682 11.9435 7.7877 5.06482

beta_save = 4.871788999999148e-04
gamma_save = 2.050000000000000
Y(18~23) = 25.0627   17.6625   12.2616    8.4308    5.7540    3.9108

=====================================================================
7.

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (RMSE(11)/9 + RMSE(19)/3 + RMSE(20)) / 3;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (RMSE(11)/9 + RMSE(19)/3 + RMSE(20)) / 3;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 3.988388999999605e-04
gamma_save = 1.450000000000000

Y(18~23) = 30.0878   19.2069   12.1930    7.6908    4.8407    3.0396


=====================================================================
6.

(1) 가중치 X

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (abs(RMSE(19)/3) + abs(RMSE(20))) / 2;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (abs(RMSE(19)/3) + abs(RMSE(20))) / 2;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

(1) (18, 19)

beta_save = 4.964888999999545e-04
gamma_save = 2.119999999999999

y(17~22) 34.2494 25.2333 18.1729 12.8771 9.02151 6.27049


(2) (19, 20)

beta_save = 4.917188999999311e-04
gamma_save = 2.079999999999999
y(18~23) = 24.7806   17.5658   12.2619    8.4744    5.8126    3.9691

=====================================================================
5.

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (abs(RMSE(10)/81) + abs(RMSE(11)/27) + abs(RMSE(12)/9) + abs(RMSE(19)/3) + abs(RMSE(20))) / 5;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (abs(RMSE(10)/81) + abs(RMSE(11)/27) + abs(RMSE(12)/9) + abs(RMSE(19)/3) + abs(RMSE(20))) / 5;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 4.085988999999555e-04
gamma_save = 1.520000000000001

Y(18 ~ 23) =  29.6662   19.1276   12.2535    7.7956    4.9484    3.1320
=====================================================================
4.

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (abs(RMSE(10)/27) + abs(RMSE(11)/9) + abs(RMSE(12)/3) + abs(RMSE(20))) / 4;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (abs(RMSE(10)/27) + abs(RMSE(11)/9) + abs(RMSE(12)/3) + abs(RMSE(20))) / 4;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 4.085888999999555e-04
gamma_save = 1.520000000000001

Y(18 ~ 23) =  29.6770   19.1354   12.2589    7.7994    4.9509    3.1338

=====================================================================
3.

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (abs(RMSE(10)/9) + abs(RMSE(11)/3) + abs(RMSE(20))) / 3;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (abs(RMSE(10)/9) + abs(RMSE(11)/3) + abs(RMSE(20))) / 3;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]


beta_save = 3.988388999999605e-04
gamma_save = 1.450000000000000

Y(18~23) = 30.0878   19.2069   12.1930    7.6908    4.8407    3.0396
=====================================================================
2.

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (abs(RMSE(18)/9) + abs(RMSE(19)/3) + abs(RMSE(20))) / 3;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (abs(RMSE(18)/9) + abs(RMSE(19)/3) + abs(RMSE(20))) / 3;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]

beta_save = 4.917188999999311e-04
gamma_save = 2.079999999999999
Y(18~23) = 24.7806   17.5658   12.2619    8.4744    5.8126    3.9691
=====================================================================
1번

clear all
close all


%% 초기값

% 확진자 수의 실제 데이터 (만 단위)
y_real = [2.7818 4.1748 9.4766 18.1104 34.0991 61.2248 103.2066 146.1474 210.0273 281.7199 244.2853 205.8896 145.9822 97.2307 58.9666 38.0604 26.7036 23.7754 17.5780 12.2696];

beta = 0.0003226189;
gamma = 1;

% 1월 2주차의 데이터
y0 = [2.7818; 43.6072; 5126.6182];

% 총 19주차이므로 t의 범위를 1~19로 지정
tspan = [1:1:20];

% 초기 SIR 모델 생성
[t,y] = ode45(@(t,y) odefcn(t,y,beta,gamma), tspan, y0);

% RMSE 행렬 생성 (범위 지정)
RMSE = zeros(1,20);

% RMSE 계산
for b=1:1:20
    RMSE(b) = sqrt((y_real(b) - y(b))^2);
end

% beta_est, gamma_est 초기값 지정
beta_est = beta;
gamma_est = gamma;
gamma_save = gamma;
RMSE_save = RMSE;
RMSE_save_sum = (abs(RMSE(14)/9) + abs(RMSE(17)/3) + abs(RMSE(20))) / 3;


%% 학습

for j = 1:1:150
    beta_est = beta;
    for i=1:1:20000
        % beta_est 증가
        beta_est = beta_est + 10^-8;
    
        % beta가 증가했을 때의 확진자 수 구하기
        [t,y] = ode45(@(t,y) odefcn(t,y,beta_est,gamma_est), tspan, y0);
        RMSE_prev = RMSE;
    
        % beta가 증가했을 때와의 RMSE 계산
        for b=1:1:20
            RMSE(b) = sqrt((y_real(b) - y(b))^2);
        end
        
        RMSE_sum = (abs(RMSE(14)/9) + abs(RMSE(17)/3) + abs(RMSE(20))) / 3;

        if abs(RMSE_save_sum) > abs(RMSE_sum)
            beta_save = beta_est;
            gamma_save = gamma_est;
            RMSE_save_sum = RMSE_sum;
        end
    end

    gamma_est = gamma_est + 0.01;
end

tspan = [1:1:23];
[t,y] = ode45(@(t,y) odefcn(t,y, beta_save,gamma_save), tspan, y0);
plot(t,y,'-o')
[y(18) y(19) y(20) y(21) y(22) y(23)]


beta_save = 4.540288999999319e-04
gamma_save = 1.830000000000001
Y(18~23) = 27.0520   18.3195   12.2519    8.1358    5.3671    3.5355
=====================================================================
beta_save = 
gamma_save = 
=====================================================================
beta_save = 
gamma_save = 
=====================================================================
=====================================================================